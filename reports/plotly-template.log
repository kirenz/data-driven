Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import plotly.graph_objects as go
import numpy as np

np.random.seed(1)

N = 100
random_x = np.linspace(0, 1, N)
random_y0 = np.random.randn(N) + 5
random_y1 = np.random.randn(N)
random_y2 = np.random.randn(N) - 5


fig = go.Figure()
fig.add_trace(go.Scatter(x=random_x, y=random_y0,
                    mode='lines',
                    marker_color='rgb(156,65,186)'))

fig.add_trace(go.Scatter(x=random_x, y=random_y1,
                    mode='lines',
                    marker_color='grey'))

fig.add_trace(go.Scatter(x=random_x, y=random_y2,
                    mode='lines',
                    marker_color='rgb(145,185,65)'))


fig.add_annotation(
                        text = '<b>Beispiel√ºberschrift in serifenlosem Font: <span style="color:rgb(156,65,186)">Komplement√§rfarbe zu CI-Gr√ºn</span></b>',
                        xref = 'paper',
                        yref= 'paper',
                        x = -0.06,
                        y = 1.12,
                        showarrow = False,
                        align='left',
                        font=dict(
                            family="Source Sans Pro,Helvetica Neue,Helvetica,Arial,sans-serif",
                            size=24,
                            color="Black",
                        ),
        ),

fig.add_annotation(
                text = 'Beispiel X-Achse',
                xref = 'paper',
                yref= 'paper',
                x = -0.01,
                y = -0.12,
                showarrow = False,
                align='left',
                font=dict(
                    family="Source Sans Pro,Helvetica Neue,Helvetica,Arial,sans-serif",
                    size=16,
                    color="grey"
                ),
),

fig.add_annotation(
                    text = 'Beispiel Y-Achse',
                    xref = 'paper',
                    yref= 'paper',
                    yanchor = 'top',
                    xanchor = 'left',
                    x = -0.06,
                    textangle=-90,
                    y = 1,
                    showarrow = False,
                    align='left',
                    font=dict(
                        family="Source Sans Pro,Helvetica Neue,Helvetica,Arial,sans-serif",
                        size=16,
                        color="grey"
                    ),
    ),

fig.update_layout(
                showlegend = False,
                plot_bgcolor= 'white',
                transition_duration=500,
                height= 700,
                width= 1200,
                xaxis =  {                                   
                        'showgrid': False,
                        'zeroline': True,
                        'showline': True,
                        'showticklabels': True,
                        'linecolor': 'grey',
                        'linewidth': 1,
                        'gridwidth': 1,
                        'ticks': 'outside',
                        'dtick': 5,
                        'tickfont' : dict(
                            size=16,
                            color='grey',
                            family="Source Sans Pro,Helvetica Neue,Helvetica,Arial,sans-serif",
                            )
                                },
                yaxis = {                             
                        'showgrid': False,
                        'zeroline': False, 
                        'ticks': 'outside',
                        'linecolor': 'grey',
                        'tickfont' : dict(
                            size=16,
                            color='grey',
                            family="Source Sans Pro,Helvetica Neue,Helvetica,Arial,sans-serif",
                            )
                            },
                
                )

fig.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<cell line: 1>[0;34m()[0m
[0;32m----> 1[0m [38;5;28;01mimport[39;00m [38;5;21;01mplotly[39;00m[38;5;21;01m.[39;00m[38;5;21;01mgraph_objects[39;00m [38;5;28;01mas[39;00m [38;5;21;01mgo[39;00m
[1;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[1;32m      4[0m np[38;5;241m.[39mrandom[38;5;241m.[39mseed([38;5;241m1[39m)

[0;31mModuleNotFoundError[0m: No module named 'plotly'
ModuleNotFoundError: No module named 'plotly'

